{"version":3,"sources":["webpack://@fremtind/portal/./src/utils/getComputedProperty.ts","webpack://@fremtind/portal/./src/texts/profile/typography.mdx","webpack://@fremtind/portal/../packages/toggle-switch-react/build/browser/index.js","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/TableHeader.tsx","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/TableCell.tsx","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/ExampleRow.tsx","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/index.tsx","webpack://@fremtind/portal/../packages/typography-react/build/browser/index.js"],"names":["getComputedProperty","node","cssProperty","window","getComputedStyle","getPropertyValue","name","ToggleSwitch","_ref","children","pressed","onClick","className","disabled","inverted","helpLabel","componentClassName","classNames","React","type","SupportLabel","TableHeader","TableCell","title","data-rowtitle","ExampleRow","level","useState","fontWeight","setFontWeight","fontSize","setFontSize","lineHeight","setLineHeight","toLowerCase","replace","ref","levels","Example","isCompact","setIsCompact","map","key","_frontmatter","Ingress","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","makeTypographyComponent","variant","textStyle","modifier","rest","_objectWithoutProperties","c","toUpperCase","Element","_extends","concat","id","errorLabel","forceCompact","srOnly"],"mappings":"0JAAO,IAAMA,EAAsB,SAACC,EAA0CC,GAAwB,QAClG,OAAQD,IAAI,UAAIE,cAAJ,iBAAI,EAAQC,iBAAiBH,UAA7B,aAAI,EAAgCI,iBAAiBH,KAAiB,Q,qHCUhEI,E,mECJlBC,G,gBAAe,SAAsBC,GACvC,IAAIC,EAAWD,EAAKC,SAChBC,EAAUF,EAAKE,QACfC,EAAUH,EAAKG,QACfC,EAAYJ,EAAKI,UACjBC,EAAWL,EAAKK,SAChBC,EAAWN,EAAKM,SAChBC,EAAYP,EAAKO,UACjBC,EAAqBC,IAAW,oBAAqBL,EAAW,CAClE,8BAA+BE,IAEjC,OAAoBI,gBAAoBA,WAAgB,KAAmBA,gBAAoB,SAAU,CACvGC,KAAM,SACN,iBAAkBT,EAClBG,SAAUA,EACVD,UAAWI,EACXL,QAASA,GACKO,gBAAoB,OAAQ,CAC1CN,UAAW,6BACGM,gBAAoB,OAAQ,CAC1CN,UAAW,uCACRH,GAAWM,GAA0BG,gBAAoBE,KAAc,CAC1ER,UAAW,gCACXG,UAAWA,OC5BFM,EAAwB,WACjC,OACI,6BACI,0BACI,sBAAIT,UAAU,gCAAd,YACA,sBAAIA,UAAU,gCAAd,QACA,sBAAIA,UAAU,gCAAd,aACA,sBAAIA,UAAU,gCAAd,mBCHHU,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOd,EAAV,EAAUA,SAAV,OACtC,sBAAIG,UAAU,6BAA6BY,gBAAeD,GACtD,qBAAGX,UAAU,aAAaH,K,UCUrBgB,EAA8B,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAAY,GAClBC,cAAS,OAAtCC,EAD+C,KACnCC,EADmC,QAEtBF,cAAS,OAAlCG,EAF+C,KAErCC,EAFqC,QAGlBJ,cAAS,OAAtCK,EAH+C,KAGnCC,EAHmC,KAStD,OACI,sBAAIrB,UAAW,6BACX,sBAAIA,UAAU,8BACV,qBAAGA,UAAS,OAASc,EAAMQ,cAAcC,QAAQ,KAAM,KAAQC,IAR/D,SAACnC,GACT4B,GAAc7B,OAAoBC,EAAM,gBACxC8B,GAAY/B,OAAoBC,EAAM,cACtCgC,GAAcjC,OAAoBC,EAAM,kBAM3ByB,IAGT,gBAACJ,EAAD,CAAWC,MAAM,QAAQK,GACzB,gBAACN,EAAD,CAAWC,MAAM,aAAaO,GAC9B,gBAACR,EAAD,CAAWC,MAAM,gBAAgBS,KC7BvCK,EAA6B,CAC/B,cACA,cACA,gBACA,iBACA,gBACA,OACA,OACA,QACA,SAGSC,EAAU,WAAM,OACSX,eAAS,GAApCY,EADkB,KACPC,EADO,KAIzB,OACI,gCACI,uCACI5B,UAAU,2CACL2B,EAAY,CAAE,sBAAsB,GAAS,IAElD,gBAAClB,EAAD,MACA,6BACKgB,EAAOI,KAAI,SAACf,GAAD,OACR,gBAACD,EAAD,CAAYiB,IAAKhB,EAAOA,MAAOA,SAI3C,gBAACnB,EAAD,CAAcK,UAAU,qBAAqBF,QAAS6B,EAAW5B,QAfnD,kBAAM6B,GAAcD,KAelC,aL3BCI,EAAe,GAOtBC,GALgBtC,EAKQ,UALA,SAA6BuC,GAEzD,OADAC,QAAQC,KAAK,aAAezC,EAAO,4EAC5B,eAASuC,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,yBACD,OAAO,SAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,iCACA,SAACT,EAAD,CAASS,QAAQ,WAAjB,qOAIA,kCACA,qRAGA,mBAAG,cAAGC,WAAW,IACb,KAAQ,yEADT,iCAGH,yCACA,8NAGA,SAAChB,EAAD,CAASe,QAAQ,aACjB,oCACA,ibACA,mCACA,4oBACA,mCACA,0OAKJF,EAAWI,gBAAiB,G,iJMlD5B,SAASC,EAAwBC,EAASC,EAAWC,GACnD,OAAO,SAAoBnD,GACzB,IAAIC,EAAWD,EAAKC,SAChBG,EAAYJ,EAAKI,UACjBgD,EAAOC,IAAyBrD,EAAM,CAAC,WAAY,eAExCmD,GAAYF,GAAStB,QAAQ,OAAO,SAAU2B,GAC3D,OAAOA,EAAEC,iBAOX,IAAIC,EAAUP,EACd,OAAoBvC,gBAAoB8C,EAASC,IAAS,CACxDrD,UAAW,GAAGsD,OAAOR,EAAW,KAAKQ,OAAOtD,GAAa,KACxDgD,GAAOnD,IAIL+C,EAAwB,KAAM,mBAC9BA,EAAwB,KAAM,mBAC9BA,EAAwB,KAAM,qBAC9BA,EAAwB,KAAM,sBAC9BA,EAAwB,KAAM,qBAC5BA,EAAwB,IAAK,WAAY,QACzCA,EAAwB,IAAK,WAAY,QACxCA,EAAwB,IAAK,YAAa,SAC1CA,EAAwB,IAAK,YAAa,SARtD,IAmCIpC,EAAe,SAAsBZ,GACvC,IAAI2D,EAAK3D,EAAK2D,GACVpD,EAAYP,EAAKO,UACjBqD,EAAa5D,EAAK4D,WAClBC,EAAe7D,EAAK6D,aACpBzD,EAAYJ,EAAKI,UACjB0D,EAAS9D,EAAK8D,OACdxD,EAAWN,EAAKM,SAChBE,EAAqBC,IAAW,yBAA0BL,EAAW,CACvE,kCAAmCyD,EACnC,gCAAiCD,EACjC,gCAAiCA,EACjC,kCAAmCE,EACnC,mCAAoCxD,IAQtC,OAAIsD,GAAcrD,EACIG,gBAAoB,OAAQ,CAC9CiD,GAAIA,EACJvD,UAAWI,GACVoD,GAAcrD,GAGZ","file":"component---src-texts-profile-typography-mdx-5c39b91b11367717e4ea.js","sourcesContent":["export const getComputedProperty = (node: HTMLElement | SVGSVGElement | null, cssProperty: string) => {\n    return (node && window?.getComputedStyle(node)?.getPropertyValue(cssProperty)) || \"N/A\";\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"../../components/Documentation/Typography/TypograhyTable\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Typografi`}</h1>\n    <Ingress mdxType=\"Ingress\">\n    Typografi er et profilbærende element i løsningene vi lager. Vi bruker stor og tydelig typografi som grafisk\n    element, i stedet for illustrasjoner og ikoner. Vær modig når du bruker typografi som virkemiddel i våre løsninger.\n    </Ingress>\n    <h2>{`Skrifttype`}</h2>\n    <p>{`Vi har vår egen skrifttype: Fremtind Grotesk. Den finnes i snittene Regular, Bold, Display og Mono. Vi bruker\nhovedsakelig Regular og Bold. Som erstatningsfont bruker vi Calibri Light. Ikke bruk andre skrifttyper når du designer løsninger\nfor Fremtind.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/fremtind/jokul/tree/master/packages/webfonts/fonts\"\n      }}>{`Last ned Fremtind Grotesk ↓`}</a></p>\n    <h2>{`Typografisk skala`}</h2>\n    <p>{`Vi har to typografiske skalaer. En som er ment for desktop-visning\nog en som er egnet for kompakte og mobile løsninger. I samme grensesnitt skal man ikke blande, men bruke bare stiler fra\nen skala.`}</p>\n    <Example mdxType=\"Example\" />\n    <h2>{`Overskrifter`}</h2>\n    <p>{`De ulike overskriftsnivåene skaper et informasjonshierarki. Mindre overskrifter er underordnet de som er større. Bruk de store overskriftene så ofte som mulig, og unngå flere enn tre overskriftsstiler på samme side. Når du lager en overskrift, må du også tenke på at den skal være enkel å skanne. Bruk godt og enkelt språk. En god overskrift er en kort setning, uten komma, punktum, bindestrek eller semikolon.`}</p>\n    <h2>{`Mengdetekst`}</h2>\n    <p>{`Vi har fire stiler for mengdetekst: Lead er til kortere tekster. Den bruker vi som ingress eller når innholdet er kort og vi vil gi det fokus. Når vi setter Lead sammen med en overskrift, bør vi bruke H1 eller H2, for å sikre god kontrast. Body er hovedstilen for brødtekst. Den bruker vi alltid, så sant det ikke finnes spesielle grunner til å velge noe annet. Body Small er en alternativ brødtekst. Den kan vi bruke hvis vi må ha en mer kompakt stil. Small er den minste skriftstilen vår. Den bruker vi når vi vil spare plass, for eksempel i tabeller eller interne applikasjoner. Vi kan også bruke den i bilde- og figurtekster.`}</p>\n    <h2>{`Linjelengde`}</h2>\n    <p>{`Innhold blir lettest å lese hvis linjelengden er mellom 45 og 75 tegn. Unngå å ha over 80 tegn per linje. For korte linjer skaper også problemer, for da må blikket skifte linje for ofte og det bryter leserytmen.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useState } from 'react';\nimport { SupportLabel } from '@fremtind/jkl-typography-react';\nimport classNames from 'classnames';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { nanoid } from 'nanoid';\nimport { ScreenReaderOnly } from '@fremtind/jkl-core';\n\nvar ToggleSwitch = function ToggleSwitch(_ref) {\n  var children = _ref.children,\n      pressed = _ref.pressed,\n      onClick = _ref.onClick,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      inverted = _ref.inverted,\n      helpLabel = _ref.helpLabel;\n  var componentClassName = classNames(\"jkl-toggle-switch\", className, {\n    \"jkl-toggle-switch--inverted\": inverted\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"aria-pressed\": !!pressed,\n    disabled: disabled,\n    className: componentClassName,\n    onClick: onClick\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-switch__slider\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-switch__expanding-pill\"\n  })), children), helpLabel && /*#__PURE__*/React.createElement(SupportLabel, {\n    className: \"jkl-toggle-switch__help-label\",\n    helpLabel: helpLabel\n  }));\n};\n\nvar ToggleSlider = function ToggleSlider(_ref) {\n  var labels = _ref.labels,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? \"\" : _ref$className,\n      inverted = _ref.inverted,\n      onToggle = _ref.onToggle,\n      defaultValue = _ref.defaultValue,\n      children = _ref.children,\n      screenReaderLabel = _ref.screenReaderLabel,\n      screenReaderSelectedLabel = _ref.screenReaderSelectedLabel;\n\n  var _useState = useState(defaultValue !== labels[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useState3 = useState(defaultValue || labels[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentLabel = _useState4[0],\n      setCurrentLabel = _useState4[1];\n\n  var _useState5 = useState(nanoid(8)),\n      _useState6 = _slicedToArray(_useState5, 1),\n      id = _useState6[0];\n\n  var selectedLabel = screenReaderSelectedLabel || \"\".concat(currentLabel, \" valgt\");\n  var ariaLabel = screenReaderLabel || \", \".concat(selectedLabel);\n\n  var handleChange = function handleChange() {\n    var nextValue = !checked;\n    var nextLabel = labels[nextValue ? 1 : 0];\n    setChecked(nextValue);\n    setCurrentLabel(nextLabel);\n    return onToggle(nextLabel);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"jkl-toggle-slider__wrapper\", {\n      \"jkl-toggle-slider__wrapper--inverted\": inverted\n    }, className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    role: \"region\",\n    \"aria-live\": \"polite\"\n  }, /*#__PURE__*/React.createElement(ScreenReaderOnly, null, selectedLabel)), /*#__PURE__*/React.createElement(\"label\", {\n    id: \"\".concat(id, \"-label\"),\n    htmlFor: id,\n    className: \"jkl-toggle-slider__label jkl-component-spacing--medium-right\"\n  }, children, /*#__PURE__*/React.createElement(ScreenReaderOnly, null, ariaLabel)), /*#__PURE__*/React.createElement(\"button\", {\n    id: id,\n    \"data-testid\": \"jkl-toggle-slider\",\n    type: \"button\",\n    role: \"switch\",\n    \"aria-checked\": checked,\n    \"aria-labelledby\": \"\".concat(id, \"-label\"),\n    onClick: handleChange,\n    className: classNames(\"jkl-toggle-slider\", {\n      \"jkl-toggle-slider--checked\": checked,\n      \"jkl-toggle-slider--not-checked\": !checked\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-slider__pill\",\n    \"aria-hidden\": true\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-slider--left\"\n  }, labels[0]), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-slider--right\"\n  }, labels[1])));\n};\n\nexport { ToggleSlider, ToggleSwitch };\n","import React from \"react\";\n\nexport const TableHeader: React.FC = () => {\n    return (\n        <thead>\n            <tr>\n                <th className=\"jkl-typography-table__header\">Stilnavn</th>\n                <th className=\"jkl-typography-table__header\">Vekt</th>\n                <th className=\"jkl-typography-table__header\">Størrelse</th>\n                <th className=\"jkl-typography-table__header\">Linjeavstand</th>\n            </tr>\n        </thead>\n    );\n};\n","import React from \"react\";\n\ninterface Props {\n    title?: string;\n}\n\nexport const TableCell: React.FC<Props> = ({ title, children }) => (\n    <td className=\"jkl-typography-table__data\" data-rowtitle={title}>\n        <p className=\"jkl-small\">{children}</p>\n    </td>\n);\n","import React, { useState } from \"react\";\nimport { TableCell } from \"./TableCell\";\nimport { getComputedProperty } from \"../../../../utils/getComputedProperty\";\n\nexport type TypographyLevels =\n    | \"Title large\"\n    | \"Title small\"\n    | \"Heading large\"\n    | \"Heading medium\"\n    | \"Heading small\"\n    | \"Lead\"\n    | \"Body\"\n    | \"Small\"\n    | \"Micro\";\n\ninterface Props {\n    level: TypographyLevels;\n}\nexport const ExampleRow: React.FC<Props> = ({ level }) => {\n    const [fontWeight, setFontWeight] = useState(\"N/A\");\n    const [fontSize, setFontSize] = useState(\"N/A\");\n    const [lineHeight, setLineHeight] = useState(\"N/A\");\n    const ref = (node: HTMLParagraphElement | null) => {\n        setFontWeight(getComputedProperty(node, \"font-weight\"));\n        setFontSize(getComputedProperty(node, \"font-size\"));\n        setLineHeight(getComputedProperty(node, \"line-height\"));\n    };\n    return (\n        <tr className={\"jkl-typography-table__row\"}>\n            <td className=\"jkl-typography-table__data\">\n                <p className={`jkl-${level.toLowerCase().replace(/ /g, \"-\")}`} ref={ref}>\n                    {level}\n                </p>\n            </td>\n            <TableCell title=\"Vekt\">{fontWeight}</TableCell>\n            <TableCell title=\"Størrelse\">{fontSize}</TableCell>\n            <TableCell title=\"Linjeavstand\">{lineHeight}</TableCell>\n        </tr>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ToggleSwitch } from \"@fremtind/jkl-toggle-switch-react\";\n\nimport \"./TypographyTable.scss\";\nimport { TableHeader } from \"./TableHeader\";\nimport { ExampleRow, TypographyLevels } from \"./ExampleRow\";\n\nconst levels: TypographyLevels[] = [\n    \"Title large\",\n    \"Title small\",\n    \"Heading large\",\n    \"Heading medium\",\n    \"Heading small\",\n    \"Lead\",\n    \"Body\",\n    \"Small\",\n    \"Micro\",\n];\n\nexport const Example = () => {\n    const [isCompact, setIsCompact] = useState(false);\n    const toggleCompact = () => setIsCompact(!isCompact);\n\n    return (\n        <>\n            <table\n                className=\"jkl-typography-table jkl-spacing--top-2\"\n                {...(isCompact ? { \"data-compactlayout\": true } : {})}\n            >\n                <TableHeader />\n                <tbody>\n                    {levels.map((level) => (\n                        <ExampleRow key={level} level={level} />\n                    ))}\n                </tbody>\n            </table>\n            <ToggleSwitch className=\"jkl-spacing--top-3\" pressed={isCompact} onClick={toggleCompact}>\n                Kompakt\n            </ToggleSwitch>\n        </>\n    );\n};\n","import _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport React from 'react';\nimport classNames from 'classnames';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\n\nfunction makeTypographyComponent(variant, textStyle, modifier) {\n  return function typography(_ref) {\n    var children = _ref.children,\n        className = _ref.className,\n        rest = _objectWithoutProperties(_ref, [\"children\", \"className\"]);\n\n    var tagName = (modifier || variant).replace(/^\\w/, function (c) {\n      return c.toUpperCase();\n    });\n\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(\"ATTENTION! The typographic components in jkl-core, like \\\"\".concat(tagName, \"\\\", are deprecated. Please stop using them and start using typographic CSS classes or the jkl-text-style Sass mixin instead. Refer to the documentation for more info.\"));\n    }\n\n    var Element = variant;\n    return /*#__PURE__*/React.createElement(Element, _extends({\n      className: \"\".concat(textStyle, \" \").concat(className || \"\")\n    }, rest), children);\n  };\n}\n\nvar H1 = makeTypographyComponent(\"h1\", \"jkl-title-large\");\nvar H2 = makeTypographyComponent(\"h2\", \"jkl-title-small\");\nvar H3 = makeTypographyComponent(\"h3\", \"jkl-heading-large\");\nvar H4 = makeTypographyComponent(\"h4\", \"jkl-heading-medium\");\nvar H5 = makeTypographyComponent(\"h5\", \"jkl-heading-small\");\nvar Lead = makeTypographyComponent(\"p\", \"jkl-lead\", \"lead\");\nvar Body = makeTypographyComponent(\"p\", \"jkl-body\", \"body\");\nvar Small = makeTypographyComponent(\"p\", \"jkl-small\", \"small\");\nvar Micro = makeTypographyComponent(\"p\", \"jkl-micro\", \"micro\");\n\nvar warningHasBeenShown$2 = false;\nvar Link = function Link(_ref) {\n  var _ref$negative = _ref.negative,\n      negative = _ref$negative === void 0 ? false : _ref$negative,\n      _ref$external = _ref.external,\n      external = _ref$external === void 0 ? false : _ref$external,\n      children = _ref.children,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? \"\" : _ref$className,\n      rest = _objectWithoutProperties(_ref, [\"negative\", \"external\", \"children\", \"className\"]);\n\n  if (process.env.NODE_ENV !== \"production\" && !warningHasBeenShown$2) {\n    console.warn(\"WARNING: This version of the Link component is deprecated! Please use the Link component found in @fremtind/jkl-core instead\");\n    warningHasBeenShown$2 = true;\n  }\n\n  return /*#__PURE__*/React.createElement(\"a\", _extends({\n    className: classNames(\"jkl-link\", className, {\n      \"jkl-link--negative\": negative,\n      \"jkl-link--external\": external\n    })\n  }, rest), children);\n};\n\nvar warningHasBeenShown$1 = false;\nvar SupportLabel = function SupportLabel(_ref) {\n  var id = _ref.id,\n      helpLabel = _ref.helpLabel,\n      errorLabel = _ref.errorLabel,\n      forceCompact = _ref.forceCompact,\n      className = _ref.className,\n      srOnly = _ref.srOnly,\n      inverted = _ref.inverted;\n  var componentClassName = classNames(\"jkl-form-support-label\", className, {\n    \"jkl-form-support-label--compact\": forceCompact,\n    \"jkl-form-support-label--error\": errorLabel,\n    \"jkl-form-support-label--help\": !errorLabel,\n    \"jkl-form-support-label--sr-only\": srOnly,\n    \"jkl-form-support-label--inverted\": inverted\n  });\n\n  if (process.env.NODE_ENV !== \"production\" && !warningHasBeenShown$1) {\n    console.warn(\"WARNING: This version of the SupportLabel component is deprecated! Please use the SupportLabel component found in @fremtind/jkl-core instead\");\n    warningHasBeenShown$1 = true;\n  }\n\n  if (errorLabel || helpLabel) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      id: id,\n      className: componentClassName\n    }, errorLabel || helpLabel);\n  }\n\n  return null;\n};\n\nvar warningHasBeenShown = false;\nfunction Label(_ref) {\n  var _classNames;\n\n  var _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? \"medium\" : _ref$variant,\n      forceCompact = _ref.forceCompact,\n      srOnly = _ref.srOnly,\n      children = _ref.children,\n      standAlone = _ref.standAlone,\n      htmlFor = _ref.htmlFor;\n  var className = classNames(\"jkl-label\", (_classNames = {}, _defineProperty(_classNames, \"jkl-label--\".concat(variant), variant), _defineProperty(_classNames, \"jkl-label--compact\", forceCompact), _defineProperty(_classNames, \"jkl-label--sr-only\", srOnly), _classNames));\n  var C = standAlone ? \"label\" : \"span\";\n\n  if (!standAlone && htmlFor) {\n    htmlFor = undefined;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"WARNING: The standard Label component renders as a <span> element, which does not take a htmlFor prop. If you want the Label to belong to a specific input, use the standAlone prop, which renders as a <label> element instead. In most cases the Label component should not be used directly, as it is part of all our input components.\");\n    }\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && !warningHasBeenShown) {\n    console.warn(\"WARNING: This version of the Label component is deprecated! Please use the Label component found in @fremtind/jkl-core instead\");\n    warningHasBeenShown = true;\n  }\n\n  return /*#__PURE__*/React.createElement(C, {\n    className: className,\n    htmlFor: htmlFor\n  }, children);\n}\n\nexport { Body, H1, H2, H3, H4, H5, Label, Lead, Link, Micro, Small, SupportLabel };\n"],"sourceRoot":""}