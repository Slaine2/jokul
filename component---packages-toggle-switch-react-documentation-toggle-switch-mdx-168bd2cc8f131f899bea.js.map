{"version":3,"sources":["webpack://@fremtind/portal/../packages/toggle-switch-react/src/ToggleSwitch.tsx","webpack://@fremtind/portal/../packages/toggle-switch-react/src/ToggleSlider.tsx","webpack://@fremtind/portal/../packages/toggle-switch-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/toggle-switch-react/documentation/ToggleSwitch.mdx","webpack://@fremtind/portal/../packages/typography-react/build/browser/index.js"],"names":["ToggleSwitch","children","pressed","onClick","className","disabled","inverted","helpLabel","componentClassName","classNames","type","aria-pressed","ToggleSlider","labels","onToggle","defaultValue","screenReaderLabel","screenReaderSelectedLabel","useState","checked","setChecked","currentLabel","setCurrentLabel","id","nanoid","selectedLabel","ariaLabel","role","aria-live","htmlFor","data-testid","aria-checked","aria-labelledby","nextValue","nextLabel","aria-hidden","Switch","boolValues","isOn","setIsOn","undefined","Slider","console","log","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","parentName","isMDXComponent","makeTypographyComponent","variant","textStyle","modifier","_ref","rest","_objectWithoutProperties","replace","c","toUpperCase","Element","React","_extends","concat","SupportLabel","errorLabel","forceCompact","srOnly"],"mappings":"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","file":"component---packages-toggle-switch-react-documentation-toggle-switch-mdx-168bd2cc8f131f899bea.js","sourcesContent":["import React, { ReactNode, MouseEventHandler } from \"react\";\nimport { SupportLabel } from \"@fremtind/jkl-typography-react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    children: ReactNode;\n    pressed?: boolean;\n    className?: string;\n    onClick?: MouseEventHandler<HTMLButtonElement>;\n    disabled?: boolean;\n    inverted?: boolean;\n    helpLabel?: string;\n}\n\nexport const ToggleSwitch = ({ children, pressed, onClick, className, disabled, inverted, helpLabel }: Props) => {\n    const componentClassName = classNames(\"jkl-toggle-switch\", className, {\n        \"jkl-toggle-switch--inverted\": inverted,\n    });\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                aria-pressed={!!pressed}\n                disabled={disabled}\n                className={componentClassName}\n                onClick={onClick}\n            >\n                <span className=\"jkl-toggle-switch__slider\">\n                    <span className=\"jkl-toggle-switch__expanding-pill\"></span>\n                </span>\n                {children}\n            </button>\n            {helpLabel && <SupportLabel className=\"jkl-toggle-switch__help-label\" helpLabel={helpLabel} />}\n        </>\n    );\n};\n","import React, { useState, FC } from \"react\";\nimport classNames from \"classnames\";\nimport { nanoid } from \"nanoid\";\nimport { ScreenReaderOnly } from \"@fremtind/jkl-core\";\n\ninterface Props {\n    labels: [string, string];\n    onToggle: (value: string) => void;\n    defaultValue?: string;\n    className?: string;\n    inverted?: boolean;\n    screenReaderLabel?: string;\n    screenReaderSelectedLabel?: string;\n}\n\nexport const ToggleSlider: FC<Props> = ({\n    labels,\n    className = \"\",\n    inverted,\n    onToggle,\n    defaultValue,\n    children,\n    screenReaderLabel,\n    screenReaderSelectedLabel,\n}) => {\n    const [checked, setChecked] = useState(defaultValue !== labels[0]);\n    const [currentLabel, setCurrentLabel] = useState(defaultValue || labels[0]);\n    const [id] = useState(nanoid(8));\n\n    const selectedLabel = screenReaderSelectedLabel || `${currentLabel} valgt`;\n    const ariaLabel = screenReaderLabel || `, ${selectedLabel}`;\n\n    const handleChange = () => {\n        const nextValue = !checked;\n        const nextLabel = labels[nextValue ? 1 : 0];\n        setChecked(nextValue);\n        setCurrentLabel(nextLabel);\n        return onToggle(nextLabel);\n    };\n\n    return (\n        <div\n            className={classNames(\n                \"jkl-toggle-slider__wrapper\",\n                { \"jkl-toggle-slider__wrapper--inverted\": inverted },\n                className,\n            )}\n        >\n            <div role=\"region\" aria-live=\"polite\">\n                <ScreenReaderOnly>{selectedLabel}</ScreenReaderOnly>\n            </div>\n\n            <label\n                id={`${id}-label`}\n                htmlFor={id}\n                className=\"jkl-toggle-slider__label jkl-component-spacing--medium-right\"\n            >\n                {children}\n                <ScreenReaderOnly>{ariaLabel}</ScreenReaderOnly>\n            </label>\n\n            <button\n                id={id}\n                data-testid=\"jkl-toggle-slider\"\n                type=\"button\"\n                role=\"switch\"\n                aria-checked={checked}\n                aria-labelledby={`${id}-label`}\n                onClick={handleChange}\n                className={classNames(\"jkl-toggle-slider\", {\n                    \"jkl-toggle-slider--checked\": checked,\n                    \"jkl-toggle-slider--not-checked\": !checked,\n                })}\n            >\n                <span className=\"jkl-toggle-slider__pill\" aria-hidden />\n                <span className=\"jkl-toggle-slider--left\">{labels[0]}</span>\n                <span className=\"jkl-toggle-slider--right\">{labels[1]}</span>\n            </button>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { ToggleSlider, ToggleSwitch } from \"../src\";\n\nexport const Switch: React.FC<ExampleComponentProps> = ({ boolValues }) => {\n    const [isOn, setIsOn] = useState(false);\n    const helpLabel =\n        boolValues && boolValues[\"Med hjelpetekst\"] ? \"Du må være koblet til wifi for å velge dette\" : undefined;\n    return (\n        <ToggleSwitch\n            pressed={isOn}\n            onClick={() => setIsOn(!isOn)}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n            disabled={boolValues && boolValues[\"Deaktivert\"]}\n            helpLabel={helpLabel}\n        >\n            Send inn data om min kjørestil\n        </ToggleSwitch>\n    );\n};\n\nexport const Slider: React.FC<ExampleComponentProps> = ({ boolValues }) => {\n    return (\n        <ToggleSlider\n            defaultValue=\"måned\"\n            labels={[\"måned\", \"år\"]}\n            onToggle={console.log}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n        >\n            Pris per\n        </ToggleSlider>\n    );\n};\n\nconst Example: React.FC<ExampleComponentProps> = (props) => (\n    <section>\n        <Switch {...props} />\n        <div className=\"jkl-layout-spacing--large-top\">\n            <Slider {...props} />\n        </div>\n    </section>\n);\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Switch, Slider } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Med veksleknapper kan brukerne bytte mellom to statuser (av eller på) uten at de må bekrefte valget. Ledeteksten forteller hva brukeren slår av og på. Vi har to varianter, en ren av/på knapp og en slider variant der man velger mellom to states.\n    </Ingress>\n    <h2>{`ToggleSwitch`}</h2>\n    <ComponentExample component={Switch} knobs={{\n      boolProps: [\"Invertert\", \"Deaktivert\", \"Med hjelpetekst\"]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Veksleknapper passer til situasjoner der brukerne selv kan velge å ha en funksjon av eller på, for eksempel automatisk oppdatering eller automatisk lagring.`}</p>\n    <p>{`Ikke bruk veksleknapp hvis brukeren må bekrefte valget sitt.`}</p>\n    <h2>{`ToggleSlider`}</h2>\n    <ComponentExample component={Slider} knobs={{\n      boolProps: []\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Brukes der brukeren kan velge mellom to valg.`}</p>\n    <h2>{`Eksempler på bruk`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Slå innstillinger av eller på i en applikasjon.`}</li>\n      <li parentName=\"ul\">{`Bytte mellom lys eller mørk modus i et grensesnitt.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport React from 'react';\nimport classNames from 'classnames';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\n\nfunction makeTypographyComponent(variant, textStyle, modifier) {\n  return function typography(_ref) {\n    var children = _ref.children,\n        className = _ref.className,\n        rest = _objectWithoutProperties(_ref, [\"children\", \"className\"]);\n\n    var tagName = (modifier || variant).replace(/^\\w/, function (c) {\n      return c.toUpperCase();\n    });\n\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(\"ATTENTION! The typographic components in jkl-core, like \\\"\".concat(tagName, \"\\\", are deprecated. Please stop using them and start using typographic CSS classes or the jkl-text-style Sass mixin instead. Refer to the documentation for more info.\"));\n    }\n\n    var Element = variant;\n    return /*#__PURE__*/React.createElement(Element, _extends({\n      className: \"\".concat(textStyle, \" \").concat(className || \"\")\n    }, rest), children);\n  };\n}\n\nvar H1 = makeTypographyComponent(\"h1\", \"jkl-title-large\");\nvar H2 = makeTypographyComponent(\"h2\", \"jkl-title-small\");\nvar H3 = makeTypographyComponent(\"h3\", \"jkl-heading-large\");\nvar H4 = makeTypographyComponent(\"h4\", \"jkl-heading-medium\");\nvar H5 = makeTypographyComponent(\"h5\", \"jkl-heading-small\");\nvar Lead = makeTypographyComponent(\"p\", \"jkl-lead\", \"lead\");\nvar Body = makeTypographyComponent(\"p\", \"jkl-body\", \"body\");\nvar Small = makeTypographyComponent(\"p\", \"jkl-small\", \"small\");\nvar Micro = makeTypographyComponent(\"p\", \"jkl-micro\", \"micro\");\n\nvar warningHasBeenShown$2 = false;\nvar Link = function Link(_ref) {\n  var _ref$negative = _ref.negative,\n      negative = _ref$negative === void 0 ? false : _ref$negative,\n      _ref$external = _ref.external,\n      external = _ref$external === void 0 ? false : _ref$external,\n      children = _ref.children,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? \"\" : _ref$className,\n      rest = _objectWithoutProperties(_ref, [\"negative\", \"external\", \"children\", \"className\"]);\n\n  if (process.env.NODE_ENV !== \"production\" && !warningHasBeenShown$2) {\n    console.warn(\"WARNING: This version of the Link component is deprecated! Please use the Link component found in @fremtind/jkl-core instead\");\n    warningHasBeenShown$2 = true;\n  }\n\n  return /*#__PURE__*/React.createElement(\"a\", _extends({\n    className: classNames(\"jkl-link\", className, {\n      \"jkl-link--negative\": negative,\n      \"jkl-link--external\": external\n    })\n  }, rest), children);\n};\n\nvar warningHasBeenShown$1 = false;\nvar SupportLabel = function SupportLabel(_ref) {\n  var id = _ref.id,\n      helpLabel = _ref.helpLabel,\n      errorLabel = _ref.errorLabel,\n      forceCompact = _ref.forceCompact,\n      className = _ref.className,\n      srOnly = _ref.srOnly,\n      inverted = _ref.inverted;\n  var componentClassName = classNames(\"jkl-form-support-label\", className, {\n    \"jkl-form-support-label--compact\": forceCompact,\n    \"jkl-form-support-label--error\": errorLabel,\n    \"jkl-form-support-label--help\": !errorLabel,\n    \"jkl-form-support-label--sr-only\": srOnly,\n    \"jkl-form-support-label--inverted\": inverted\n  });\n\n  if (process.env.NODE_ENV !== \"production\" && !warningHasBeenShown$1) {\n    console.warn(\"WARNING: This version of the SupportLabel component is deprecated! Please use the SupportLabel component found in @fremtind/jkl-core instead\");\n    warningHasBeenShown$1 = true;\n  }\n\n  if (errorLabel || helpLabel) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      id: id,\n      className: componentClassName\n    }, errorLabel || helpLabel);\n  }\n\n  return null;\n};\n\nvar warningHasBeenShown = false;\nfunction Label(_ref) {\n  var _classNames;\n\n  var _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? \"medium\" : _ref$variant,\n      forceCompact = _ref.forceCompact,\n      srOnly = _ref.srOnly,\n      children = _ref.children,\n      standAlone = _ref.standAlone,\n      htmlFor = _ref.htmlFor;\n  var className = classNames(\"jkl-label\", (_classNames = {}, _defineProperty(_classNames, \"jkl-label--\".concat(variant), variant), _defineProperty(_classNames, \"jkl-label--compact\", forceCompact), _defineProperty(_classNames, \"jkl-label--sr-only\", srOnly), _classNames));\n  var C = standAlone ? \"label\" : \"span\";\n\n  if (!standAlone && htmlFor) {\n    htmlFor = undefined;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"WARNING: The standard Label component renders as a <span> element, which does not take a htmlFor prop. If you want the Label to belong to a specific input, use the standAlone prop, which renders as a <label> element instead. In most cases the Label component should not be used directly, as it is part of all our input components.\");\n    }\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && !warningHasBeenShown) {\n    console.warn(\"WARNING: This version of the Label component is deprecated! Please use the Label component found in @fremtind/jkl-core instead\");\n    warningHasBeenShown = true;\n  }\n\n  return /*#__PURE__*/React.createElement(C, {\n    className: className,\n    htmlFor: htmlFor\n  }, children);\n}\n\nexport { Body, H1, H2, H3, H4, H5, Label, Lead, Link, Micro, Small, SupportLabel };\n"],"sourceRoot":""}