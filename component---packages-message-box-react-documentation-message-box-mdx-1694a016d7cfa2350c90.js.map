{"version":3,"sources":["webpack://@fremtind/portal/../packages/message-box-react/src/MessageBox.tsx","webpack://@fremtind/portal/../packages/message-box-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/message-box-react/documentation/MessageBox.mdx"],"names":["messageFactory","messageType","title","fullWidth","className","children","inverted","componentClassName","classNames","role","width","height","viewBox","fill","xmlns","cx","cy","r","stroke","x","y","transform","d","getIcon","undefined","InfoMessage","ErrorMessage","WarningMessage","SuccessMessage","Example","boolValues","choiceValues","C","typeofBox","getTypeOfBox","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"mappings":"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","file":"component---packages-message-box-react-documentation-message-box-mdx-1694a016d7cfa2350c90.js","sourcesContent":["import React, { ReactNode } from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    children: ReactNode;\n    title?: string;\n    fullWidth?: boolean;\n    className?: string;\n    inverted?: boolean;\n}\n\ntype messageTypes = \"info\" | \"error\" | \"success\" | \"warning\";\n\nfunction messageFactory(messageType: messageTypes) {\n    return function messageBox({ title, fullWidth, className = \"\", children, inverted }: Props) {\n        const componentClassName = classNames(\"jkl-message-box\", \"jkl-message-box--\" + messageType, className, {\n            \"jkl-message-box--full\": fullWidth,\n            \"jkl-message-box--dark\": inverted,\n        });\n\n        const getIcon = (messageType: messageTypes) => {\n            switch (messageType) {\n                case \"error\":\n                    return (\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <rect\n                                x=\"4\"\n                                y=\"4.22168\"\n                                width=\"1\"\n                                height=\"22\"\n                                transform=\"rotate(-45 4 4.22168)\"\n                                fill=\"currentColor\"\n                            />\n                        </svg>\n                    );\n                case \"info\":\n                    return (\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <path\n                                d=\"M11.952 7.328C12.384 7.328 12.688 7.072 12.688 6.624C12.688 6.192 12.384 5.92 11.952 5.92C11.536 5.92 11.248 6.192 11.248 6.624C11.248 7.072 11.536 7.328 11.952 7.328ZM11.504 18H12.512V9.408H11.504V18Z\"\n                                fill=\"currentColor\"\n                            />\n                        </svg>\n                    );\n                case \"success\":\n                    return (\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <path d=\"M7 13.5L10 16.5L19.5 7\" stroke=\"currentColor\" />\n                        </svg>\n                    );\n                case \"warning\":\n                    return (\n                        <svg width=\"24\" height=\"25\" viewBox=\"0 0 24 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <path\n                                className=\"jkl-icon-exclamation\"\n                                d=\"M11.112 14.624H11.688L11.896 11.36V6H10.904V11.36L11.112 14.624ZM11.4 18.24C11.784 18.24 12.136 17.952 12.136 17.504C12.136 17.072 11.784 16.784 11.4 16.784C11.016 16.784 10.664 17.072 10.664 17.504C10.664 17.952 11.016 18.24 11.4 18.24Z\"\n                                fill=\"currentColor\"\n                            />\n                        </svg>\n                    );\n                default:\n                    return null;\n            }\n        };\n\n        return (\n            <div className={componentClassName} role=\"alert\">\n                <div className=\"jkl-message-box__icon\">{getIcon(messageType)}</div>\n                {title !== undefined && <div className=\"jkl-message-box__title jkl-heading-small\">{title}</div>}\n                <span className=\"jkl-message-box__message jkl-body\">{children}</span>\n            </div>\n        );\n    };\n}\n\nexport const InfoMessage = messageFactory(\"info\");\nexport const ErrorMessage = messageFactory(\"error\");\nexport const WarningMessage = messageFactory(\"warning\");\nexport const SuccessMessage = messageFactory(\"success\");\n","import React from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components\";\nimport { ErrorMessage, InfoMessage, SuccessMessage, WarningMessage } from \"../src\";\n\nconst getTypeOfBox = (typeofBox?: string) => {\n    switch (typeofBox) {\n        case \"Infomelding\":\n            return InfoMessage;\n        case \"Suksessmelding\":\n            return SuccessMessage;\n        case \"Advarselsmelding\":\n            return WarningMessage;\n        case \"Feilmelding\":\n            return ErrorMessage;\n        default:\n            return InfoMessage;\n    }\n};\n\nexport const Example: React.FC<ExampleComponentProps> = ({ boolValues, choiceValues }) => {\n    const C = getTypeOfBox(choiceValues ? choiceValues[\"Type\"] : \"\");\n    return (\n        <C\n            fullWidth={boolValues && boolValues[\"Full bredde\"]}\n            title={choiceValues && choiceValues[\"Type\"]}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n        >\n            Hei, jeg er en melding av typen {choiceValues ? choiceValues[\"Type\"] : \"ʕ•ᴥ•ʔ\"}\n        </C>\n    );\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    En melding er en beskjed til brukeren. Det kan være et varsel om at noe er feil, informasjon om at noe mangler i et\n    skjema, eller en bekreftelse på at noe har blitt oppdatert. Meldingene består av en overskrift og en meldingstekst.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Full bredde\", \"Invertert\"],\n      choiceProps: [{\n        name: \"Type\",\n        values: [\"Infomelding\", \"Suksessmelding\", \"Advarselsmelding\", \"Feilmelding\"],\n        defaultValue: 0\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <h2>{`Meldingstyper`}</h2>\n    <p>{`Vi har fire ulike meldinger, med fargene blå, rød, gul og grønn.`}</p>\n    <p><strong parentName=\"p\">{`Blå:`}</strong>{` gir informasjon til brukeren.`}</p>\n    <p><strong parentName=\"p\">{`Gul:`}</strong>{` gir brukeren en advarsel, for eksempel at en funksjonalitet er i beta og derfor er ustabil.`}</p>\n    <p><strong parentName=\"p\">{`Rød:`}</strong>{` gir brukeren en feilmelding, for eksempel hvis det oppstår en systemfeil eller brukeren avbryter en handling.`}</p>\n    <p><strong parentName=\"p\">{`Grønn:`}</strong>{` forteller at en handling var vellykket.`}</p>\n    <h3>{`Tilgjengelighet`}</h3>\n    <p>{`Når vi bruker meldinger med farge, må vi alltid huske å ha en god og beskrivende overskrift, siden farge ikke er et godt nok kjennetegn for alle brukere. Skriv en presis meldingstekst, der du sier det viktigste først.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}